//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/scripts/gunControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @gunControlls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @gunControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""gunControlls"",
    ""maps"": [
        {
            ""name"": ""mainGunControlls"",
            ""id"": ""08150f1a-660f-4caf-893c-27df00d4f76d"",
            ""actions"": [
                {
                    ""name"": ""shoot"",
                    ""type"": ""Button"",
                    ""id"": ""ed749b1d-13d9-4e08-a096-2c5e9c74fc10"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""reload"",
                    ""type"": ""Button"",
                    ""id"": ""9b271c46-b0e4-4a06-ad3f-1cb2e830c386"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""22439e4a-4d28-454c-8e4b-3be8c428eb25"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37fbaad1-cfaa-4381-bbdf-1950a93e71eb"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // mainGunControlls
        m_mainGunControlls = asset.FindActionMap("mainGunControlls", throwIfNotFound: true);
        m_mainGunControlls_shoot = m_mainGunControlls.FindAction("shoot", throwIfNotFound: true);
        m_mainGunControlls_reload = m_mainGunControlls.FindAction("reload", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // mainGunControlls
    private readonly InputActionMap m_mainGunControlls;
    private IMainGunControllsActions m_MainGunControllsActionsCallbackInterface;
    private readonly InputAction m_mainGunControlls_shoot;
    private readonly InputAction m_mainGunControlls_reload;
    public struct MainGunControllsActions
    {
        private @gunControlls m_Wrapper;
        public MainGunControllsActions(@gunControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @shoot => m_Wrapper.m_mainGunControlls_shoot;
        public InputAction @reload => m_Wrapper.m_mainGunControlls_reload;
        public InputActionMap Get() { return m_Wrapper.m_mainGunControlls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainGunControllsActions set) { return set.Get(); }
        public void SetCallbacks(IMainGunControllsActions instance)
        {
            if (m_Wrapper.m_MainGunControllsActionsCallbackInterface != null)
            {
                @shoot.started -= m_Wrapper.m_MainGunControllsActionsCallbackInterface.OnShoot;
                @shoot.performed -= m_Wrapper.m_MainGunControllsActionsCallbackInterface.OnShoot;
                @shoot.canceled -= m_Wrapper.m_MainGunControllsActionsCallbackInterface.OnShoot;
                @reload.started -= m_Wrapper.m_MainGunControllsActionsCallbackInterface.OnReload;
                @reload.performed -= m_Wrapper.m_MainGunControllsActionsCallbackInterface.OnReload;
                @reload.canceled -= m_Wrapper.m_MainGunControllsActionsCallbackInterface.OnReload;
            }
            m_Wrapper.m_MainGunControllsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @shoot.started += instance.OnShoot;
                @shoot.performed += instance.OnShoot;
                @shoot.canceled += instance.OnShoot;
                @reload.started += instance.OnReload;
                @reload.performed += instance.OnReload;
                @reload.canceled += instance.OnReload;
            }
        }
    }
    public MainGunControllsActions @mainGunControlls => new MainGunControllsActions(this);
    public interface IMainGunControllsActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
    }
}
